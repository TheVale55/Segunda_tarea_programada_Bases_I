USE [Proyecto2]
GO
/****** Object:  StoredProcedure [dbo].[FiltraNombre]    Script Date: 27/09/2023 23:25:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[FiltraNombre] 
	@Filtro VARCHAR(128)	--El valor de texto que se usa para filtrar la lista de artículos
	,@IP VARCHAR(64) --Dirección ip para agregar al event log
	,@User VARCHAR(16) --User utilizado para agregar al event log
AS
BEGIN

	SET NOCOUNT ON;
	BEGIN TRY
		IF(@Filtro='')	-- Se valida que el parámetro ingresado es vacío
		BEGIN 
			--Se hace la selección de las columnas que se desean mostrar
			SELECT A.Nombre 'Artículo'
			, A.Precio 'Precio'
			FROM dbo.Articulo A
			WHERE A.EsActivo=1
			ORDER BY Nombre --Se hace el sort por nombre de forma ascendente
		END

		ELSE --Si el parámetro no era vacío
		BEGIN
			--Se hace la selección de las columnas que se desean mostrar
			SELECT A.Codigo 'Código'
			, A.Nombre 'Artículo'
			, B.Nombre 'Clase'
			, A.Precio 'Precio'
			--Se crea una refencia de las tablas Articulo y ClaseArticulo con A y B respectivamente y se extrae el nombre de la clase
			FROM dbo.Articulo A INNER JOIN dbo.ClaseArticulo B ON A.idClaseArticulo = B.id
			WHERE A.Nombre LIKE '%'+@Filtro+'%' AND A.EsActivo=1--Se hace el filtrado con el parámetro ingresado
			ORDER BY A.Nombre --Se hace el sort por nombre de forma ascendente
		END

		INSERT INTO dbo.EventLog --Se realiza la inserción a la tabla EventLog
			VALUES(
				'{TipoAccion=<Consulta por nombre> Description=<'+@Filtro+'>}'
				, (SELECT id FROM Usuario WHERE Usuario.UserName = @User)
				, @IP
				, GETDATE())
	SET NOCOUNT OFF;
	END TRY

	BEGIN CATCH
		INSERT INTO dbo.DBErrors	
		VALUES (
			SUSER_SNAME()
			,ERROR_NUMBER()
			,ERROR_STATE()
			,ERROR_SEVERITY()
			,ERROR_LINE()
			,ERROR_PROCEDURE()
			,ERROR_MESSAGE()
			,GETDATE()
		);
	END CATCH

END
